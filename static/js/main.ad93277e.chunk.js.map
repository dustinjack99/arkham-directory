{"version":3,"sources":["components/tablerows.js","components/table.js","components/searchbuttons.js","components/container.js","App.js","serviceWorker.js","index.js"],"names":["TableRows","props","console","log","results","map","e","i","key","user","name","first","last","department","title","incarcerated","Table","className","data-text","SearchButtons","htmlFor","onClick","handleInputChange","value","Container","state","Users","search","getInmatesAll","setState","getInmatesWard","ward","wardUsers","length","push","getInmatesInc","incUsers","handleFormSubmit","query","target","textContent","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad93277e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TableRows = (props) => {\n  console.log(props);\n\n  return (\n    <>\n      {props.results.map((e, i) => (\n        <tr key={i}>\n          <td>{e.user}</td>\n          <td>{e.name.first}</td>\n          <td>{e.name.last}</td>\n          <td>{e.department.title}</td>\n          <td>{e.department.name}</td>\n          <td>{e.incarcerated && \"Imprisoned\"}</td>\n        </tr>\n      ))}\n    </>\n  );\n};\n\nexport default TableRows;\n","import React from \"react\";\nimport TableRows from \"./tablerows\";\n\nconst Table = (props) => {\n  console.log(props);\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th className=\"table\" data-text=\"Username\">\n            Username\n          </th>\n          <th className=\"table\" data-text=\"First Name\">\n            First Name\n          </th>\n          <th className=\"table\" data-text=\"Last Name\">\n            Last Name\n          </th>\n          <th className=\"table\" data-text=\"Profession\">\n            Profession\n          </th>\n          <th className=\"table\" data-text=\"Ward\">\n            Ward\n          </th>\n          <th className=\"table\" data-text=\"Incarcerated\">\n            Incarcerated\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <TableRows results={props.results} />\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\n\nconst SearchButtons = (props) => {\n  return (\n    <div className=\"buttonBox\">\n      <div>\n        <label htmlFor=\"inc\">Find Inmate by: </label>\n        <button\n          onClick={props.handleInputChange}\n          name=\"search\"\n          value=\"Incarceration\"\n        >\n          Incarceration\n        </button>\n      </div>\n      <div>\n        <label htmlFor=\"ward\">Find Inmate by: </label>\n        <button onClick={props.handleInputChange} name=\"search\" value=\"Ward\">\n          Ward I\n        </button>\n        <button onClick={props.handleInputChange} name=\"search\" value=\"Ward\">\n          Ward II\n        </button>\n        <button onClick={props.handleInputChange} name=\"search\" value=\"Ward\">\n          Ward III\n        </button>\n      </div>\n      <div>\n        <label htmlFor=\"all\">Find Inmate by: </label>\n        <button\n          onClick={props.handleInputChange}\n          name=\"search\"\n          value=\"All Inmates\"\n        >\n          All Inmates\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchButtons;\n","import React, { Component } from \"react\";\nimport Table from \"./table\";\nimport SearchButtons from \"./searchbuttons\";\nimport Users from \"../data/users.json\";\n\nclass Container extends Component {\n  state = {\n    results: Users.results,\n    search: \"All Inmates\",\n  };\n\n  getInmatesAll = () => {\n    this.setState({ results: Users.results }, () => {});\n  };\n\n  getInmatesWard = (ward) => {\n    let wardUsers = [];\n\n    for (let i = 0; i < Users.results.length; i++) {\n      if (ward === Users.results[i].department.name) {\n        let user = Users.results[i];\n        wardUsers.push(user);\n      }\n    }\n    this.setState({ results: wardUsers }, () => {});\n  };\n\n  getInmatesInc = () => {\n    let incUsers = [];\n\n    for (let i = 0; i < Users.results.length; i++)\n      if (Users.results[i].incarcerated) {\n        let user = Users.results[i];\n        incUsers.push(user);\n      }\n\n    this.setState({ results: incUsers }, () => {});\n  };\n\n  handleFormSubmit = (query, ward) => {\n    if (query === \"All Inmates\") {\n      this.setState({ results: \"All Inmates\" });\n      this.getInmatesAll(this.state.search);\n    } else if (query === \"Incarceration\") {\n      this.setState({ results: \"Incarceration\" });\n      this.getInmatesInc(this.state.search);\n    } else if (query === \"Ward\") {\n      this.setState({ results: \"Ward\" });\n      this.getInmatesWard(ward);\n    }\n  };\n\n  handleInputChange = (e) => {\n    const { name, value } = e.target;\n    const ward = e.target.textContent;\n    this.setState({\n      [name]: value,\n    });\n    this.handleFormSubmit(value, ward);\n  };\n\n  render() {\n    return (\n      <>\n        <Table results={this.state.results} />\n        <SearchButtons\n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n        />\n      </>\n    );\n  }\n}\n\nexport default Container;\n","import React from \"react\";\nimport Container from \"./components/container\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Container />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}